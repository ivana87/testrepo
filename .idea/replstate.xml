<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1483716410864">{:repl-history {:ide [], :local [&quot;(def inc3 (inc-maker 3))&quot; &quot;(inc 4)&quot; &quot;(inc3 4)&quot; &quot;(let [x 3]\n  x)&quot; &quot;(def dalmatian-list\n  [\&quot;Pongo\&quot; \&quot;Perdita\&quot; \&quot;Puppy 1\&quot; \&quot;Puppy 2\&quot;])&quot; &quot;(let [dalmatians (take 2 dalmatian-list)]\n  dalmatians)&quot; &quot;(let [dalmatians (take 2 dalmatian-list)]  dalmatians)&quot; &quot;(println dalmatian)&quot; &quot;(println dalmatian_list)&quot; &quot;(prn dalmatian_list)&quot; &quot;(prn dalmatian)&quot; &quot;(prn dalmatians)&quot; &quot;(prn dalmatian-\n     list)&quot; &quot;(prn dalmatian-list)&quot; &quot;(defn matching-part\n  [part]\n  {:name (clojure.string/replace (:name part) #\&quot;^left-\&quot; \&quot;right-\&quot;)\n   :size (:size part)})&quot; &quot;(matching-part {:name \&quot;left-eye\&quot; :size 1}\n               {:name \&quot;left-hand\&quot; :size 2})&quot; &quot;(matching-part {:name \&quot;left-eye\&quot; :size 1})&quot; &quot;(def asym-hobbit-body-parts [{:name \&quot;head\&quot; :size 3}\n                             {:name \&quot;left-eye\&quot; :size 1}\n                             {:name \&quot;left-ear\&quot; :size 1}\n                             {:name \&quot;mouth\&quot; :size 1}\n                             {:name \&quot;nose\&quot; :size 1}\n                             {:name \&quot;neck\&quot; :size 2}\n                             {:name \&quot;left-shoulder\&quot; :size 3}\n                             {:name \&quot;left-upper-arm\&quot; :size 3}\n                             {:name \&quot;chest\&quot; :size 10}\n                             {:name \&quot;back\&quot; :size 10}\n                             {:name \&quot;left-forearm\&quot; :size 3}\n                             {:name \&quot;abdomen\&quot; :size 6}\n                             {:name \&quot;left-kidney\&quot; :size 1}\n                             {:name \&quot;left-hand\&quot; :size 2}\n                             {:name \&quot;left-knee\&quot; :size 2}\n                             {:name \&quot;left-thigh\&quot; :size 4}\n                             {:name \&quot;left-lower-leg\&quot; :size 3}\n                             {:name \&quot;left-achilles\&quot; :size 1}\n                             {:name \&quot;left-foot\&quot; :size 2}])&quot; &quot;(defn symmetrize-body-parts\n  \&quot;Expects a seq of maps that have a :name and :size\&quot;\n  [asym-body-parts]\n  (loop [remaining-asym-parts asym-body-parts\n         final-body-parts []]\n    (if (empty? remaining-asym-parts)\n      final-body-parts\n      (let [[part &amp; remaining] remaining-asym-parts]\n        (recur remaining\n               (into final-body-parts\n                     (set [part (matching-part part)])))))))&quot; &quot;(symmetrize-body-parts asym-hobbit-body-parts)&quot; &quot;(defn titleize\n  [topic]\n  (str topic \&quot; for the Brave and True\&quot;))&quot; &quot;(map titleize [\&quot;laba\&quot; \&quot;lab\&quot;])&quot; &quot;(map titleize (\&quot;laba\&quot; \&quot;lab\&quot;))&quot; &quot;(map titleize '(\&quot;laba\&quot; \&quot;lab\&quot;))&quot; &quot;(map titleize #{\&quot;laba\&quot; \&quot;lab\&quot;})&quot; &quot;(def human-consumption   [8.1 7.3 6.6 5.0])\n(def critter-consumption [0.0 0.2 0.3 1.1])&quot; &quot;;test map and maps collection&quot; &quot;(defn unify-diet-data\n  [human critter]\n  {:human human\n   :critter critter})&quot; &quot;(unify-diet-data \&quot;Ivana\&quot; \&quot;45.5\&quot;)&quot; &quot;(map unify-diet-data human-consumption critter-consumption)&quot; &quot;(def sum # (reduce + %))&quot; &quot;(def sum #(reduce + %))&quot; &quot;(sum (3 4 5))&quot; &quot;(sum [3 4 5])&quot; &quot;(def avg #(/ (sum %) (count %)))&quot; &quot;(defn stats\n  [numbers]\n  (map #(% numbers) [sum count avg]))&quot; &quot;(stats [2 3 4])&quot; &quot;(def identities\n  [{:alias \&quot;Batman\&quot; :real \&quot;Bruce Wayne\&quot;}\n   {:alias \&quot;Spider-Man\&quot; :real \&quot;Peter Parker\&quot;}\n   {:alias \&quot;Santa\&quot; :real \&quot;Your mom\&quot;}\n   {:alias \&quot;Easter Bunny\&quot; :real \&quot;Your dad\&quot;}])&quot; &quot;(map :alias identities)&quot; &quot;(reduce (fn [new-map [key val]]\n          (assoc new-map key (inc val)))\n        {}\n        {:max 30 :min 10})&quot; &quot;(assoc {a:2} :b:3)&quot; &quot;(assoc {:a 2} :b:3)&quot; &quot;(assoc {:a 2} :b 3)&quot; &quot;(reduce (fn [new-map [key val]]\n          (if (&gt; val 4)\n            (assoc new-map key val)\n            new-map))\n        {}\n        {:human 4.1\n         :critter 3.9})&quot; &quot;(def food-journal\n  [{:month 1 :day 1 :human 5.3 :critter 2.3}\n   {:month 1 :day 2 :human 5.1 :critter 2.0}\n   {:month 2 :day 1 :human 4.9 :critter 2.1}\n   {:month 2 :day 2 :human 5.0 :critter 2.5}\n   {:month 3 :day 1 :human 4.2 :critter 3.3}\n   {:month 3 :day 2 :human 4.0 :critter 3.8}\n   {:month 4 :day 1 :human 3.7 :critter 3.9}\n   {:month 4 :day 2 :human 3.7 :critter 3.6}])&quot; &quot;(take-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 4)\n            (drop-while # &lt; (:month %) 2) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 4)\n            (drop-while #(&lt; (:month %) 2) food-journal))&quot; &quot;(filter #(&lt; (:month %) 3) food-journal)&quot; &quot;(def vampire-database\n  {0 {:makes-blood-puns? false, :has-pulse? true  :name \&quot;McFishwich\&quot;}\n   1 {:makes-blood-puns? false, :has-pulse? true  :name \&quot;McMackson\&quot;}\n   2 {:makes-blood-puns? true,  :has-pulse? false :name \&quot;Damon Salvatore\&quot;}\n   3 {:makes-blood-puns? true,  :has-pulse? true  :name \&quot;Mickey Mouse\&quot;}})\n\n(defn vampire-related-details\n  [social-security-number]\n  (Thread/sleep 1000)\n  (get vampire-database social-security-number))\n\n(defn vampire?\n  [record]\n  (and (:makes-blood-puns? record)\n       (not (:has-pulse? record))\n       record))\n\n(defn identify-vampire\n  [social-security-numbers]\n  (first (filter vampire?\n                 (map vampire-related-details social-security-numbers))))\n&quot; &quot;(vampire? vampire-database)&quot; &quot;(vampire? {{:makes-blood-puns? true,  :has-pulse? false :name \&quot;Damon Salvatore\&quot;}})&quot; &quot;(vampire? {:makes-blood-puns? true,  :has-pulse? false :name \&quot;Damon Salvatore\&quot;})&quot; &quot;(vampire? {:makes-blood-puns? true :has-pulse? false :name \&quot;Damon Salvatore\&quot;})&quot; &quot;(identify-vampire vampire-database)&quot; &quot;(prn vampire-database)&quot; &quot;(time (vampire-related-details 0))&quot; &quot;(time (def mapped-details (map vampire-related-details (range 0 1000000))))&quot; &quot;(time (first mapped-details))&quot; &quot;(time (identify-vampire (range 0 1000000)))&quot; &quot;(identify-vampire 0 {:makes-blood-puns? false, :has-pulse? true, :name \&quot;McFishwich\&quot;})&quot; &quot;(identify-vampire (0 {:makes-blood-puns? false, :has-pulse? true, :name \&quot;McFishwich\&quot;}))&quot; &quot;(identify-vampire ({:makes-blood-puns? false, :has-pulse? true, :name \&quot;McFishwich\&quot;}))&quot; &quot;(identify-vampire {:makes-blood-puns? false :has-pulse? true :name \&quot;McFishwich\&quot;})&quot; &quot;(identify-vampire #{:makes-blood-puns? false :has-pulse? true :name \&quot;McFishwich\&quot;})&quot; &quot;(vampire? {:makes-blood-puns? false :has-pulse? true :name \&quot;McFishwich\&quot;})&quot; &quot;(first (2 43 34 4))&quot; &quot;(first [ 4 54 5 5 ])&quot; &quot;(map vampire-related-details [0 1 2 3])&quot; &quot;(map vampire-related-details (0 1 2 3))&quot; &quot;(map vampire-related-details range (0 3))&quot; &quot;(map vampire-related-details range (0))&quot; &quot;(map vampire-related-details 0)&quot; &quot;(def add10 (partial + 10))&quot; &quot;(add10 4 5 6)&quot; &quot;(def nums (map inc [1 2 3]))&quot; &quot;(nums)&quot; &quot;(nums )&quot; &quot;nums&quot; &quot;(defn hypotenuse [x y]\n  (let [xx (* x x)\n        yy (* y y)]\n    (Math/sqrt (+ xx yy))))&quot; &quot;(hypotenuse 3 4)&quot; &quot;(defn better-symmetrize-body-parts\n  \&quot;Expects a seq of maps that have a :name and :size\&quot;\n  [asym-body-parts]\n  (reduce (fn [final-body-parts part]\n            (into final-body-parts (set [part (matching-part part)])))\n          []\n          asym-body-parts))&quot; &quot;(defn hit\n  [asym-body-parts]\n  (let [sym-parts (better-symmetrize-body-parts asym-body-parts)\n        body-part-size-sum (reduce + (map :size sym-parts))\n        target (rand body-part-size-sum)]\n    (loop [[part &amp; remaining] sym-parts\n           accumulated-size (:size part)]\n      (if (&gt; accumulated-size target)\n        part\n        (recur remaining (+ accumulated-size (:size (first remaining))))))))\n&quot; &quot;(reduce + (map :human food-journal) )&quot; &quot;hit&quot; &quot;(hit asym-hobbit-body-parts)&quot; &quot;(count [3 4 5 6])&quot; &quot;(count [])&quot; &quot;(count [2 3 5])&quot; &quot;(defn sum1\n  [numbers]\n  ;starting loop from here\n  (loop [acc 0\n         restnum numbers]\n    (if (= (count rest) 0)\n      acc\n      (recur (+ acc (first restnum)) (rest restnum)))))&quot; &quot;(sum1 [10 2 20])&quot; &quot;(ns-interns testapp.core)&quot; &quot;(ns-interns *ns*)&quot; &quot;(ns-map *ns*)&quot; &quot;(defn sum1\n  [numbers]\n  ;starting loop from here\n  (loop [acc 0\n         restnum numbers]\n    (if (= (count restnum) 0)\n      acc\n      (recur (+ acc (first restnum)) (rest restnum)))))&quot; &quot;(sum 1 [3 4 5 6])&quot; &quot;(sum1 [3 4 5 6])&quot; &quot;(def hello (fn [name] (str \&quot;ello\&quot; name \&quot;sdsdsd\&quot;)))\n&quot; &quot;(defn hello (fn [name] (str \&quot;ello\&quot; name \&quot;sdsdsd\&quot;)))\n&quot; &quot;(defn sign [x]\n  (if (&lt; x 0)\n    \&quot;-\&quot;\n    \&quot;+\&quot;\n    ))&quot; &quot;(defn sum1\n  [numbers]\n  ;starting loop from here\n  (loop [acc 0\n         restnum numbers]\n    (if (= (count rest) 0)\n      acc\n      (recur (+ acc (first restnum)) (rest restnum)))))\n&quot;], :remote []}}</component>
</project>